openapi: 3.0.0
info:
  title: API Name
  description: API description
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://api.example.com
    description: Production server

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Posts
    description: Blog post management
  - name: Comments
    description: Comment management

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Health Check
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: healthy
        database:
          type: boolean
          example: true
        environment:
          type: string
          example: development

    # Authentication
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - fullName
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: securepassword123
        fullName:
          type: string
          example: John Doe

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: securepassword123

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        tokenType:
          type: string
          example: bearer
        expiresIn:
          type: integer
          example: 1800

    UserResponse:
      type: object
      properties:
        userId:
          type: string
          example: user-123
        email:
          type: string
          example: user@example.com
        fullName:
          type: string
          example: John Doe
        permissions:
          type: array
          items:
            type: string
          example: ["read", "write"]

    # Posts
    CreatePostRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: My First Blog Post
        content:
          type: string
          minLength: 1
          maxLength: 10000
          example: This is the content of my first blog post.

    PostResponse:
      type: object
      properties:
        postId:
          type: string
          example: post-123
        title:
          type: string
          example: My First Blog Post
        content:
          type: string
          example: This is the content of my first blog post.
        authorId:
          type: string
          example: user-123
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z

    PostListResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostResponse'
        totalCount:
          type: integer
          example: 100
        hasMore:
          type: boolean
          example: true

    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: Updated Blog Post Title
        content:
          type: string
          minLength: 1
          maxLength: 10000
          example: Updated content

    # Comments
    CreateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 1000
          example: Great post!

    CommentResponse:
      type: object
      properties:
        commentId:
          type: string
          example: comment-456
        postId:
          type: string
          example: post-123
        content:
          type: string
          example: Great post!
        authorId:
          type: string
          example: user-123
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z

    CommentListResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentResponse'
        totalCount:
          type: integer
          example: 50

    # Error Responses
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          example: Resource not found

paths:
  /health:
    get:
      summary: Health check
      description: Check API health and database connectivity
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/auth/register:
    post:
      summary: Register new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      summary: User login
      description: Authenticate user and get access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/me:
    get:
      summary: Get current user
      description: Get authenticated user information
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/posts:
    post:
      summary: Create post
      description: Create a new blog post
      tags:
        - Posts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '200':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: List posts
      description: Get list of blog posts with pagination
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostListResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/posts/{postId}:
    get:
      summary: Get post
      description: Get a single blog post by ID
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update post
      description: Update an existing blog post
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete post
      description: Delete a blog post
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Post deleted successfully
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/posts/{postId}/comments:
    post:
      summary: Create comment
      description: Add a comment to a blog post
      tags:
        - Comments
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '200':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: List comments
      description: Get all comments for a blog post
      tags:
        - Comments
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'