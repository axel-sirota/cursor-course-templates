version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: blog_postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-blog_db}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blog_network

  # pgAdmin (Optional - for database management UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: blog_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - blog_network
    profiles:
      - tools

  # FastAPI Application (Optional - for containerized development)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: blog_api
    environment:
      PORT: ${PORT:-8000}
      HOST: ${HOST:-0.0.0.0}
      DEBUG: ${DEBUG:-True}
      
      # Database
      DATABASE_URL: postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-blog_db}
      
      # Supabase (if using)
      SUPABASE_URL: ${SUPABASE_URL:-}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:-}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-}
      
      # JWT
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change-in-production}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
    ports:
      - "${PORT:-8000}:8000"
    volumes:
      - .:/app
      - /app/.venv
    depends_on:
      postgres:
        condition: service_healthy
    command: python main.py
    networks:
      - blog_network
    profiles:
      - app

volumes:
  postgres_data:
    driver: local

networks:
  blog_network:
    driver: bridge