---
description: Session completion and transition documentation rules
globs: ["plan/sessions/**", "phases/**", "docs/**"]
alwaysApply: false
---

# Session Transition: Documentation and Handoff

## Purpose
Ensure proper documentation and knowledge transfer between sessions. Each session completion generates a summary that enables efficient continuation in the next session.

## Session Completion Triggers

Transition to next session when:
- All E2E tests passing for current endpoint
- Code quality checks pass (Black, mypy)
- Implementation complete per session requirements
- No known bugs or issues
- Session documentation updated
- Session plan objectives met

## Session Summary Generation

Create plan/sessions/session-N-summary.md for each completed session.

### Session Summary Template Structure

```markdown
# Session N Summary: Phase M ([HTTP Method] [Endpoint Path])

## Overview
Brief description of what was implemented in this session.

## Implementation Details

### Database Changes
- Tables created or modified
- Migrations applied
- Indexes added

### Models Created
- Domain models (with file paths)
- API models (with file paths)
- Purpose of each model

### Repository Methods
- Methods implemented
- Type-safe mappers created
- File location

### Service Layer
- Services created or updated
- Business logic implemented
- File location

### API Endpoint
- Endpoint path and method
- Request/response models
- Authentication requirements

## Tests

### E2E Tests
- Test files created
- Test scenarios covered
- All tests passing: YES/NO

### Unit Tests
- Services tested
- Coverage percentage (if applicable)

## Shared Libraries

### Available for Next Phases
- Repository classes that can be reused
- Service methods available
- Models representing core entities
- Utilities or helpers created

### Dependencies
- External packages added to requirements.txt
- Configuration variables added to .env

## Known Limitations

### Current Implementation
- Features not implemented yet
- Performance considerations
- Edge cases not handled

### Technical Debt
- Code that needs refactoring
- Tests that need improvement
- Documentation gaps

## Next Session Recommendations

### Suggested Next Session
Recommend next session based on:
- Dependency on current session
- Complexity progression
- User value
- Session plan availability

### Prerequisite Work
- Additional models needed
- Migrations required
- Shared services to build

## Learnings and Gotchas

### What Worked Well
- Patterns that were effective
- Tools that helped
- Design decisions that paid off

### Challenges Encountered
- Problems solved during implementation
- Workarounds applied
- Areas needing improvement

### Time Estimates
- Estimated time for phase: X hours
- Actual time spent: Y hours
- Variance explanation

## Code Quality Metrics

### Formatting
- Black formatter applied: YES/NO
- Type hints coverage: X%
- Docstrings added: YES/NO

### Testing
- E2E test coverage: X scenarios
- Unit test coverage: Y%
- All tests passing: YES/NO

## Files Changed

### Created
- List of new files with paths

### Modified
- List of modified files with paths

### Deleted
- List of deleted files (if any)
```

## Example Session Summary

```markdown
# Session 2 Summary: Phase 1 (POST /posts)

## Overview
Implemented blog post creation endpoint with full database integration, authentication, and E2E testing.

## Implementation Details

### Database Changes
- Created posts table via migration: 20240101000000_create_posts_table.sql
- Added indexes on author_id and created_at
- Applied migration successfully to local database

### Models Created
- PostBase (app/modules/posts/models/domain_models.py): Business fields only
- Post (app/modules/posts/models/domain_models.py): Full model with metadata
- PostCreate (app/modules/posts/models/domain_models.py): Creation model
- PostUpdate (app/modules/posts/models/domain_models.py): Update model
- CreatePostRequest (app/api/posts.py): API request model (camelCase)
- PostResponse (app/api/posts.py): API response model (camelCase)

### Repository Methods
- PostRepository.create() - Create new post
- PostRepository._supabase_to_model() - Type-safe mapper from DB
- PostRepository._modelcreate_to_supabase() - Type-safe mapper to DB
- File: app/modules/posts/repository/repository.py

### Service Layer
- PostService.create_post() - Business logic for post creation
- Includes error handling and logging
- File: app/modules/posts/services/post_service.py

### API Endpoint
- POST /api/posts
- Request: CreatePostRequest (title, content, authorId)
- Response: PostResponse (postId, title, content, authorId, createdAt)
- Authentication: Required (JWT Bearer token)
- File: app/api/posts.py

## Tests

### E2E Tests
- tests/api/test_posts.py::test_create_post - Success case
- tests/api/test_posts.py::test_create_post_validation - Validation errors
- tests/api/test_posts.py::test_create_post_unauthorized - Auth requirement
- All tests passing: YES

### Unit Tests
- tests/modules/posts/test_post_service.py - Service layer with mocked repo
- Coverage: 95% of service methods

## Shared Libraries

### Available for Next Sessions
- PostRepository - Can be used for GET /posts/{id} in Session 3
- PostService - Can be extended with get_by_id() method
- Post model - Represents core post entity
- Database connection via app.core.database.db

### Dependencies
- No new packages added
- No new environment variables needed

## Known Limitations

### Current Implementation
- Only creation implemented, no read/update/delete yet
- No support for tags or categories
- No content length validation beyond Pydantic
- No duplicate post prevention

### Technical Debt
- Consider adding content sanitization
- May need to add post status field (draft/published)
- Service layer could use dependency injection for testing

## Next Phase Recommendations

### Suggested Next Session
Session 3: Phase 2 (GET /posts/{id})
- Depends on Session 2 (need posts to read)
- Simple implementation (reuse PostRepository)
- High user value (view created posts)
- Session plan: plan/sessions/session-3-phase-2.md

### Prerequisite Work
- Add PostRepository.get_by_id() method
- Add PostService.get_post_by_id() method
- Add GET endpoint to app/api/posts.py
- Write E2E test for retrieval

## Learnings and Gotchas

### What Worked Well
- Layered model architecture prevented confusion
- Type-safe mappers caught field name mismatches
- TDD approach caught authentication bug early
- Service layer made testing straightforward

### Challenges Encountered
- Initial confusion with camelCase API vs snake_case DB
- Needed to ensure UUID conversion to string
- Test fixtures required unique email addresses

### Time Estimates
- Estimated time: 25 minutes
- Actual time: 30 minutes
- Variance: +5 minutes for debugging UUID conversion

## Code Quality Metrics

### Formatting
- Black formatter applied: YES
- Type hints coverage: 100%
- Docstrings added: YES

### Testing
- E2E test coverage: 3 scenarios
- Unit test coverage: 95%
- All tests passing: YES

## Files Changed

### Created
- app/modules/posts/models/__init__.py
- app/modules/posts/models/domain_models.py
- app/modules/posts/repository/__init__.py
- app/modules/posts/repository/repository.py
- app/modules/posts/services/post_service.py
- app/api/posts.py
- tests/api/test_posts.py
- tests/modules/posts/test_post_service.py
- database/develop/supabase/migrations/20240101000000_create_posts_table.sql

### Modified
- app/main.py (added posts router)
- requirements.txt (no changes)
- .env.example (no changes)

### Deleted
- None
```

## Session Transition Checklist

Before generating summary and moving to next session:

### Code Quality
- [ ] All E2E tests passing
- [ ] All unit tests passing
- [ ] Code formatted with Black
- [ ] Type hints on all functions
- [ ] Docstrings on all public APIs
- [ ] No linting errors
- [ ] No type checking errors

### Documentation
- [ ] Code comments for complex logic
- [ ] README updated if needed
- [ ] API documentation updated
- [ ] Migration files documented

### Testing
- [ ] E2E test for success case
- [ ] E2E test for error cases
- [ ] E2E test for authentication
- [ ] Unit tests for complex business logic
- [ ] Test coverage adequate

### Implementation
- [ ] Feature complete per session requirements
- [ ] Error handling implemented
- [ ] Logging added
- [ ] No hardcoded values
- [ ] Secrets properly managed

### Knowledge Transfer
- [ ] Shared libraries documented
- [ ] Dependencies documented
- [ ] Known limitations listed
- [ ] Next session recommendations provided
- [ ] Session plan objectives met

## Generating the Session Summary

When user says "Session N complete" or "Transition to next session":

1. Read current session implementation
2. Analyze all changes made
3. Generate comprehensive summary
4. Save to plan/sessions/session-N-summary.md
5. Provide brief verbal summary to user
6. Ask for confirmation before proceeding

## Session Kickoff

When starting a new session:

1. Read previous session summaries
2. Review next session plan (plan/sessions/session-N-phase-M.md)
3. Identify available shared libraries
4. Check dependencies
5. Confirm session requirements with user
6. Begin with E2E test writing

## Research Export

When encountering issues requiring external research:

Generate research-export.md using templates/research-export-template.md:
- Document the problem clearly
- List all attempted solutions
- Include relevant code snippets
- Formulate specific questions
- Provide context from phase summaries

## Continuous Improvement

After each session:
- Update time estimates based on actual time
- Note patterns that worked well
- Document challenges for future reference
- Suggest process improvements
- Update session plans for future projects

## Session Transition Anti-Patterns

Do NOT:
- Move to next session with failing tests
- Skip session summary generation
- Document only what was built (also document why)
- Forget to note known limitations
- Skip recommendations for next session
- Generate summary without reading code
- Use generic summaries (be specific)
- Forget to document shared libraries
- Skip session plan review
- Automatically start next session
- Combine multiple sessions into one